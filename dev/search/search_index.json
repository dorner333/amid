{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Awesome Medical Imaging Datasets (AMID) - a curated list of medical imaging datasets with unified interfaces Getting started Just import a dataset and start using it! Note that for some datasets you must manually download the raw files first. from amid.verse import VerSe ds = VerSe () # get the available ids print ( len ( ds . ids )) i = ds . ids [ 0 ] # use the available methods: # load the image and vertebrae masks x , y = ds . image ( i ), ds . masks ( i ) print ( ds . split ( i ), ds . patient ( i )) # or get a namedTuple-like object: entry = ds ( i ) x , y = entry . image , entry . masks print ( entry . split , entry . patient ) Install Just get it from PyPi: pip install amid Or if you want to use version control features: git clone https://github.com/neuro-ml/amid.git cd amid && pip install -e .","title":"Home"},{"location":"#getting-started","text":"Just import a dataset and start using it! Note that for some datasets you must manually download the raw files first. from amid.verse import VerSe ds = VerSe () # get the available ids print ( len ( ds . ids )) i = ds . ids [ 0 ] # use the available methods: # load the image and vertebrae masks x , y = ds . image ( i ), ds . masks ( i ) print ( ds . split ( i ), ds . patient ( i )) # or get a namedTuple-like object: entry = ds ( i ) x , y = entry . image , entry . masks print ( entry . split , entry . patient )","title":"Getting started"},{"location":"#install","text":"Just get it from PyPi: pip install amid Or if you want to use version control features: git clone https://github.com/neuro-ml/amid.git cd amid && pip install -e .","title":"Install"},{"location":"datasets-api/","text":"Datasets API amid.cc359.CC359 A (C)algary-(C)ampinas public brain MR dataset with (359) volumetric images [1]_. There are three segmentation tasks on this dataset: (i) brain, (ii) hippocampus, and (iii) White-Matter (WM), Gray-Matter (WM), and Cerebrospinal Fluid (CSF) segmentation. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes homepage (upd): https://sites.google.com/view/calgary-campinas-dataset/home homepage (old): https://miclab.fee.unicamp.br/calgary-campinas-359-updated-05092017 To obtain MR images and brain and hippocampus segmentation masks, please, follow the instructions at the download platform: https://portal.conp.ca/dataset?id=projects/calgary-campinas. Via datalad lib you need to download three zip archives: - Original.zip (the original MR images) - hippocampus_staple.zip (Silver-standard hippocampus masks generated using STAPLE) - Silver-standard-machine-learning.zip (Silver-standard brain masks generated using a machine learning method) To the current date, WM, GM, and CSF mask could be downloaded only from the google drive: https://drive.google.com/drive/u/0/folders/0BxLb0NB2MjVZNm9JY1pWNFp6WTA?resourcekey=0-2sXMr8q-n2Nn6iY3PbBAdA. Here you need to manually download a folder (from the google drive root above) CC359/Reconstructed/CC359/WM-GM-CSF/ So the root folder to pass to this dataset class should contain four objects: - three zip archives ( Original.zip , hippocampus_staple.zip , and Silver-standard-machine-learning.zip ) - one folder WM-GM-CSF with the original structure: <...>/WM-GM-CSF/CC0319_ge_3_45_M.nii.gz <...>/WM-GM-CSF/CC0324_ge_3_56_M.nii.gz ... Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> cc359 = CC359 ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( cc359 . ids )) # 359 >>> print ( cc359 . image ( cc359 . ids [ 0 ]) . shape ) # (171, 256, 256) >>> print ( cc359 . wm_gm_csf ( cc359 . ids [ 80 ]) . shape ) # (180, 240, 240) References .. [1] Souza, Roberto, et al. \"An open, multi-vendor, multi-field-strength brain MR dataset and analysis of publicly available skull stripping methods agreement.\" NeuroImage 170 (2018): 482-494. https://www.sciencedirect.com/science/article/pii/S1053811917306687 ids () vendor ( id : str ) field ( id : str ) age ( id : str ) gender ( id : str ) image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). brain ( id : str ) hippocampus ( id : str ) wm_gm_csf ( id : str ) amid.ct_ich.CT_ICH (C)omputed (T)omography Images for (I)ntracranial (H)emorrhage Detection and (S)egmentation. This dataset contains 75 head CT scans including 36 scans for patients diagnosed with intracranial hemorrhage with the following types: Intraventricular, Intraparenchymal, Subarachnoid, Epidural and Subdural. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes required Data required Then required the required Examples required ids () image ( id : str ) mask ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). age ( id : str ) gender ( id : str ) intraventricular_hemorrhage ( id : str ) Returns True if hemorrhage exists and its type is intraventricular. intraparenchymal_hemorrhage ( id : str ) Returns True if hemorrhage was diagnosed and its type is intraparenchymal. subarachnoid_hemorrhage ( id : str ) Returns True if hemorrhage was diagnosed and its type is subarachnoid. epidural_hemorrhage ( id : str ) Returns True if hemorrhage was diagnosed and its type is epidural. subdural_hemorrhage ( id : str ) Returns True if hemorrhage was diagnosed and its type is subdural. fracture ( id : str ) Returns True if skull fracture was diagnosed. notes ( id : str ) Returns special notes if they exist. hemorrhage_diagnosis_raw_metadata ( id : str ) amid.crossmoda.CrossMoDA Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Download links: 2021 & 2022: https://zenodo.org/record/6504722#.YsgwnNJByV4 Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = CrossMoDA ( root = '/path/to/archives/root' ) >>> print ( len ( ds . ids )) # 484 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 214) References ids () train_source_df ( id : str ) image ( id : str ) -> Union [ np . ndarray , None ] pixel_spacing ( id : str ) Returns pixel spacing along axes (x, y, z) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation split ( id : str ) -> str The split in which this entry is contained: training_source, training_target, validation year ( id : str ) -> int The year in which this entry was published: 2021 or 2022 masks ( id : str ) -> Union [ np . ndarray , None ] Combined mask of schwannoma and cochlea (1 and 2 respectively) koos_grade ( id : str ) -> int VS Tumour characteristic according to Koos grading scale: [1..4] or (-1 - post operative) amid.egd.EGD The Erasmus Glioma Database (EGD): Structural MRI scans, WHO 2016 subtypes, and segmentations of 774 patients with glioma [1]_. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes The access to the dataset could be requested at XNAT portal [https://xnat.bmia.nl/data/archive/projects/egd]. To download the data in the compatible structure we recommend to use egd-downloader script [https://zenodo.org/record/4761089#.YtZpLtJBxhF]. Please, refer to its README for further information. Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> egd = EGD ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( egd . ids )) # 774 >>> print ( egd . t1gd ( egd . ids [ 215 ]) . shape ) # (197, 233, 189) >>> print ( egd . manufacturer ( egd . ids [ 444 ])) # Philips Medical Systems References .. [1] van der Voort, Sebastian R., et al. \"The Erasmus Glioma Database (EGD): Structural MRI scans, WHO 2016 subtypes, and segmentations of 774 patients with glioma.\" Data in brief 37 (2021): 107191. https://www.sciencedirect.com/science/article/pii/S2352340921004753 ids () brain_mask ( id : str ) deface_mask ( id : str ) affine ( id : str ) voxel_spacing ( id : str ) flair ( id : str ) t1 ( id : str ) t1gd ( id : str ) t2 ( id : str ) genetic_and_histological_label_idh ( id : str ) genetic_and_histological_label_1p19q ( id : str ) genetic_and_histological_label_grade ( id : str ) age ( id : str ) sex ( id : str ) observer ( id : str ) original_scan ( id : str ) manufacturer ( id : str ) system ( id : str ) field ( id : str ) mask ( id : str ) amid.flare2022.FLARE2022 An abdominal organ segmentation dataset for semi-supervised learning [1]_. The dataset was used at the MICCAI FLARE 2022 challenge. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required Notes Download link: https://flare22.grand-challenge.org/Dataset/ The root folder should contain the two downloaded folders, namely: \"Training\" and \"Validation\". Examples: >>> # Place the downloaded folders in any folder and pass the path to the constructor: >>> ds = FLARE2022 ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 2100 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 110) >>> print ( ds . mask ( ds . ids [ 25 ]) . shape ) # (512, 512, 104) References .. [1] Ma, Jun, et al. \"Fast and Low-GPU-memory abdomen CT organ segmentation: The FLARE challenge.\" Medical Image Analysis 82 (2022): 102616. ids () image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation mask ( id : str ) amid.lidc.dataset.LIDC The (L)ung (I)mage (D)atabase (C)onsortium image collection (LIDC-IDRI) [1]_ consists of diagnostic and lung cancer screening thoracic computed tomography (CT) scans with marked-up annotated lesions and lung nodules segmentation task. Scans contains multiple expert annotations. Number of CT scans: 1018. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Follow the download instructions at https://wiki.cancerimagingarchive.net/pages/viewpage.action?pageId=1966254. Then, the folder with raw downloaded data should contain folder LIDC-IDRI , which contains folders LIDC-IDRI-* . Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = LIDC ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 1018 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 194) >>> print ( ds . cancer ( ds . ids [ 0 ]) . shape ) # (512, 512, 194) References .. [1] Armato III, McLennan, et al. \"The lung image database consortium (lidc) and image database resource initiative (idri): a completed reference database of lung nodules on ct scans.\" Medical physics 38(2) (2011): 915\u2013931. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3041807/ ids () image ( id : str ) study_uid ( id : str ) series_uid ( id : str ) patient_id ( id : str ) sop_uids ( id : str ) pixel_spacing ( id : str ) slice_locations ( id : str ) voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). contrast_used ( id : str ) If the DICOM file for the scan had any Contrast tag, this is marked as True . is_from_initial ( id : str ) Indicates whether or not this PatientID was tagged as part of the initial 399 release. orientation_matrix ( id : str ) conv_kernel ( id : str ) kvp ( id : str ) study_date ( id : str ) accession_number ( id : str ) nodules ( id : str ) nodules_masks ( id : str ) cancer ( id : str ) amid.lits.LiTS A (Li)ver (T)umor (S)egmentation dataset [1] from Medical Segmentation Decathlon [2] There are two segmentation tasks on this dataset: liver and liver tumor segmentation. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Follow the download instructions at https://competitions.codalab.org/competitions/17094. Then, the folder with raw downloaded data should contain two zip archives with the train data ( Training_Batch1.zip and Training_Batch2.zip ) and a folder with the test data ( LITS-Challenge-Test-Data ). The folder with test data should have original structure: <...>/LITS-Challenge-Test-Data/test-volume-0.nii <...>/LITS-Challenge-Test-Data/test-volume-1.nii ... P.S. Organs boxes are also provided from a separate source https://github.com/superxuang/caffe_3d_faster_rcnn. Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = LiTS ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 201 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 163) >>> print ( ds . tumor_mask ( ds . ids [ 80 ]) . shape ) # (512, 512, 771) References .. [1] Bilic, Patrick, et al. \"The liver tumor segmentation benchmark (lits).\" arXiv preprint arXiv:1901.04056 (2019). .. [2] Antonelli, Michela, et al. \"The medical segmentation decathlon.\" arXiv preprint arXiv:2106.05735 (2021). ids () fold ( id : str ) image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). mask ( id : str ) amid.liver_medseg.LiverMedseg LiverMedseg is a public CT segmentation dataset with 50 annotated images. Case collection of 50 livers with their segments. Images obtained from Decathlon Medical Segmentation competition Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Download links: https://www.medseg.ai/database/liver-segments-50-cases Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = LiverMedseg ( root = '/path/to/archives/root' ) >>> print ( len ( ds . ids )) # 50 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 38) References ids () image ( id : str ) -> np . ndarray affine ( id : str ) -> np . ndarray The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) -> tuple mask ( id : str ) -> np . ndarray amid.midrc.MIDRC MIDRC-RICORD dataset 1a is a public COVID-19 CT segmentation dataset with 120 scans. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Follow the download instructions at https://wiki.cancerimagingarchive.net/pages/viewpage.action?pageId=80969742 Download both Images and Annotations to the same folder Then, the folder with downloaded data should contain two paths with the data The folder should have this structure: <...>/ /MIDRC-RICORD-1A <...>/ /MIDRC-RICORD-1a_annotations_labelgroup_all_2020-Dec-8.json Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = MIDRC ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) 155 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) (512, 512, 112) >>> print ( ds . mask ( ds . ids [ 80 ]) . shape ) (6, 512, 512, 450) References ids () image ( id : str ) image_meta ( id : str ) voxel_spacing ( id : str ) labels ( id : str ) mask ( id : str ) amid.mood.MOOD A (M)edival (O)ut-(O)f-(D)istribution analysis challenge [1]_ This dataset contains raw brain MRI and abdomainal CT images. Number of training samples: - Brain: 800 scans ( 256 x 256 x 256 ) - Abdominal: 550 scans ( 512 x 512 x 512 ) For each setup there are 4 toy test samples with OOD cases. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Follow the download instructions at https://www.synapse.org/#!Synapse:syn21343101/wiki/599515. Then, the folder with raw downloaded data should contain four zip archives with data ( abdom_toy.zip , abdom_train.zip , brain_toy.zip and brain_train.zip ). Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = MOOD ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 1358 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 512) >>> print ( ds . pixel_label ( ds . ids [ 0 ]) . shape ) # (512, 512, 512) References .. [1] Zimmerer, Petersen, et al. \"Medical Out-of-Distribution Analysis Challenge 2022.\" doi: 10.5281/zenodo.6362313 (2022). ids () fold ( id : str ) Returns fold: train or toy (test). task ( id : str ) Returns task: brain (MRI) or abdominal (CT). image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). sample_label ( id : str ) Returns sample-level OOD score for toy examples and None otherwise. 0 indicates no abnormality and 1 indicates abnormal input. pixel_label ( id : str ) Returns voxel-level OOD scores for toy examples and None otherwise. 0 indicates no abnormality and 1 indicates abnormal input. amid.medseg9.Medseg9 Medseg9 is a public COVID-19 CT segmentation dataset with 9 annotated images. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Data can be downloaded here: http://medicalsegmentation.com/covid19/. Then, the folder with raw downloaded data should contain three zip archives with data and masks ( rp_im.zip , rp_lung_msk.zip , rp_msk.zip ). Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = Medseg9 ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 9 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (630, 630, 45) >>> print ( ds . covid ( ds . ids [ 0 ]) . shape ) # (630, 630, 45) ids () image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation. voxel_spacing ( id : str ) Returns voxel spacing along axes (x, y, z). lungs ( id : str ) Boolean mask. Lungs are not separated. covid ( id : str ) int16 mask. 0 - normal, 1 - ground-glass opacities (\u043c\u0430\u0442\u043e\u0432\u043e\u0435 \u0441\u0442\u0435\u043a\u043b\u043e), 2 - consolidation (\u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044f). amid.cancer_500.dataset.MoscowCancer500 The Moscow Radiology Cancer-500 dataset. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded files. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Download links: https://mosmed.ai/en/datasets/ct_lungcancer_500/ Examples: >>> # Place the downloaded files in any folder and pass the path to the constructor: >>> ds = MoscowCancer500 ( root = '/path/to/files/root' ) >>> print ( len ( ds . ids )) # 979 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 67) ids () image ( id : str ) study_uid ( id : str ) series_uid ( id : str ) sop_uids ( id : str ) pixel_spacing ( id : str ) slice_locations ( id : str ) orientation_matrix ( id : str ) instance_numbers ( id : str ) conv_kernel ( id : str ) kvp ( id : str ) patient_id ( id : str ) study_date ( id : str ) accession_number ( id : str ) nodules ( id : str ) amid.covid_1110.MoscowCovid1110 The Moscow Radiology COVID-19 dataset. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded files. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Download links: https://mosmed.ai/en/datasets/covid191110/ Examples: >>> # Place the downloaded files in any folder and pass the path to the constructor: >>> ds = MoscowCovid1110 ( root = '/path/to/files/root' ) >>> print ( len ( ds . ids )) # 1110 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 43) ids () image ( id : str ) affine ( id : str ) label ( id : str ) mask ( id : str ) amid.nsclc.NSCLC NSCLC-Radiomics is a public cell lung cancer segmentation dataset with 422 patients. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Follow the download instructions at https://wiki.cancerimagingarchive.net/display/Public/NSCLC-Radiomics The folder with downloaded data should contain two pathes The folder should have this structure: <...>/ /NSCLC-Radiomics/LUNG1-XXX Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = NSCLC ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) 422 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) (512, 512, 134) >>> print ( ds . mask ( ds . ids [ 80 ]) . shape ) (512, 512, 108) References ids () j ( id : str ) image ( id : str ) image_meta ( id : str ) voxel_spacing ( id : str ) mask ( id : str ) lung_left ( id : str ) lung_right ( id : str ) lungs_total ( id : str ) heart ( id : str ) esophagus ( id : str ) spinal_cord ( id : str ) amid.vs_seg.VSSEG Segmentation of vestibular schwannoma from MRI, an open annotated dataset ... (VS-SEG) [1]_. The dataset contains 250 pairs of T1c and T2 images of the brain with the vestibular schwannoma segmentation task. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes The dataset and corresponding metadata could be downloaded at the TCIA page: https://wiki.cancerimagingarchive.net/pages/viewpage.action?pageId=70229053. To download DICOM images using .tcia file, we use public build of TCIA downloader: https://github.com/ygidtu/NBIA_data_retriever_CLI. Then, download the rest of metadata from TCIA page: - DirectoryNamesMappingModality.csv - Vestibular-Schwannoma-SEG_matrices Mar 2021.zip - Vestibular-Schwannoma-SEG contours Mar 2021.zip and unzip the latter two .zip archives. So the root folder to pass to this dataset should contain 3 folders and 1 .csv file: <...>/DirectoryNamesMappingModality.csv <...>/Vestibular-Schwannoma-SEG/ \u251c\u2500\u2500 VS-SEG-001/... \u251c\u2500\u2500 VS-SEG-002/... \u2514\u2500\u2500 ... <...>/contours/ <...>/registration_matrices/ Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = VSSEG ( root = '/path/to/downloaded/data/folder/' ) >>> print ( len ( ds . ids )) # 250 >>> print ( ds . image_t1 ( ds . ids [ 0 ]) . shape ) # (512, 512, 120) >>> print ( ds . schwannoma_t1 ( ds . ids [ 80 ]) . shape ) # (512, 512, 120) References .. [1] Shapey, Jonathan, et al. \"Segmentation of vestibular schwannoma from MRI, an open annotated dataset and baseline algorithm.\" Scientific Data 8.1 (2021): 1-6. https://www.nature.com/articles/s41597-021-01064-w ids () registration_matrix_t1_to_t2_params ( id : str ) registration_matrix_t2_to_t1_params ( id : str ) contours_t1 ( id : str ) contours_t2 ( id : str ) normed_contours_t1 ( id : str ) normed_contours_t2 ( id : str ) has_schwannoma ( id : str ) has_cochlea ( id : str ) has_meningioma ( id : str ) schwannoma_t1 ( id : str ) schwannoma_t2 ( id : str ) cochlea_t1 ( id : str ) cochlea_t2 ( id : str ) meningioma_t1 ( id : str ) meningioma_t2 ( id : str ) image_t1 ( id : str ) image_t2 ( id : str ) study_uid ( id : str ) series_uid_t1 ( id : str ) series_uid_t2 ( id : str ) pixel_spacing_t1 ( id : str ) pixel_spacing_t2 ( id : str ) slice_locations_t1 ( id : str ) slice_locations_t2 ( id : str ) voxel_spacing_t1 ( id : str ) voxel_spacing_t2 ( id : str ) orientation_matrix_t1 ( id : str ) orientation_matrix_t2 ( id : str ) patient_position_t1 ( id : str ) patient_position_t2 ( id : str ) patient_id ( id : str ) study_date ( id : str ) amid.verse.VerSe A Vertebral Segmentation Dataset with Fracture Grading [1]_ The dataset was used in the MICCAI-2019 and MICCAI-2020 Vertebrae Segmentation Challenges. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes Download links: 2019: https://osf.io/jtfa5/ 2020: https://osf.io/4skx2/ Examples: >>> # Place the downloaded archives in any folder and pass the path to the constructor: >>> ds = VerSe ( root = '/path/to/archives/root' ) >>> print ( len ( ds . ids )) # 374 >>> print ( ds . image ( ds . ids [ 0 ]) . shape ) # (512, 512, 214) References .. [1] L\u00f6ffler MT, Sekuboyina A, Jacob A, et al. A Vertebral Segmentation Dataset with Fracture Grading. Radiol Artif Intell. 2020;2(4):e190138. Published 2020 Jul 29. doi:10.1148/ryai.2020190138 ids () image ( id : str ) affine ( id : str ) The 4x4 matrix that gives the image's spatial orientation split ( id : str ) The split in which this entry is contained: training, validate, test patient ( id : str ) The unique patient id year ( id : str ) The year in which this entry was published: 2019, 2020 centers ( id : str ) Vertebrae centers in format {label: [x, y, z]} masks ( id : str ) -> Union [ np . ndarray , None ] Vertebrae masks","title":"Datasets API"},{"location":"datasets-api/#datasets-api","text":"","title":"Datasets API"},{"location":"datasets-api/#amid.cc359.CC359","text":"A (C)algary-(C)ampinas public brain MR dataset with (359) volumetric images [1]_. There are three segmentation tasks on this dataset: (i) brain, (ii) hippocampus, and (iii) White-Matter (WM), Gray-Matter (WM), and Cerebrospinal Fluid (CSF) segmentation. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"CC359"},{"location":"datasets-api/#amid.ct_ich.CT_ICH","text":"(C)omputed (T)omography Images for (I)ntracranial (H)emorrhage Detection and (S)egmentation. This dataset contains 75 head CT scans including 36 scans for patients diagnosed with intracranial hemorrhage with the following types: Intraventricular, Intraparenchymal, Subarachnoid, Epidural and Subdural. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required Notes required Data required Then required the required Examples required","title":"CT_ICH"},{"location":"datasets-api/#amid.crossmoda.CrossMoDA","text":"Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"CrossMoDA"},{"location":"datasets-api/#amid.egd.EGD","text":"The Erasmus Glioma Database (EGD): Structural MRI scans, WHO 2016 subtypes, and segmentations of 774 patients with glioma [1]_. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"EGD"},{"location":"datasets-api/#amid.flare2022.FLARE2022","text":"An abdominal organ segmentation dataset for semi-supervised learning [1]_. The dataset was used at the MICCAI FLARE 2022 challenge. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required","title":"FLARE2022"},{"location":"datasets-api/#amid.lidc.dataset.LIDC","text":"The (L)ung (I)mage (D)atabase (C)onsortium image collection (LIDC-IDRI) [1]_ consists of diagnostic and lung cancer screening thoracic computed tomography (CT) scans with marked-up annotated lesions and lung nodules segmentation task. Scans contains multiple expert annotations. Number of CT scans: 1018. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"LIDC"},{"location":"datasets-api/#amid.lits.LiTS","text":"A (Li)ver (T)umor (S)egmentation dataset [1] from Medical Segmentation Decathlon [2] There are two segmentation tasks on this dataset: liver and liver tumor segmentation. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"LiTS"},{"location":"datasets-api/#amid.liver_medseg.LiverMedseg","text":"LiverMedseg is a public CT segmentation dataset with 50 annotated images. Case collection of 50 livers with their segments. Images obtained from Decathlon Medical Segmentation competition Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"LiverMedseg"},{"location":"datasets-api/#amid.midrc.MIDRC","text":"MIDRC-RICORD dataset 1a is a public COVID-19 CT segmentation dataset with 120 scans. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"MIDRC"},{"location":"datasets-api/#amid.mood.MOOD","text":"A (M)edival (O)ut-(O)f-(D)istribution analysis challenge [1]_ This dataset contains raw brain MRI and abdomainal CT images. Number of training samples: - Brain: 800 scans ( 256 x 256 x 256 ) - Abdominal: 550 scans ( 512 x 512 x 512 ) For each setup there are 4 toy test samples with OOD cases. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"MOOD"},{"location":"datasets-api/#amid.medseg9.Medseg9","text":"Medseg9 is a public COVID-19 CT segmentation dataset with 9 annotated images. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"Medseg9"},{"location":"datasets-api/#amid.cancer_500.dataset.MoscowCancer500","text":"The Moscow Radiology Cancer-500 dataset. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded files. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"MoscowCancer500"},{"location":"datasets-api/#amid.covid_1110.MoscowCovid1110","text":"The Moscow Radiology COVID-19 dataset. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded files. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"MoscowCovid1110"},{"location":"datasets-api/#amid.nsclc.NSCLC","text":"NSCLC-Radiomics is a public cell lung cancer segmentation dataset with 422 patients. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"NSCLC"},{"location":"datasets-api/#amid.vs_seg.VSSEG","text":"Segmentation of vestibular schwannoma from MRI, an open annotated dataset ... (VS-SEG) [1]_. The dataset contains 250 pairs of T1c and T2 images of the brain with the vestibular schwannoma segmentation task. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"VSSEG"},{"location":"datasets-api/#amid.verse.VerSe","text":"A Vertebral Segmentation Dataset with Fracture Grading [1]_ The dataset was used in the MICCAI-2019 and MICCAI-2020 Vertebrae Segmentation Challenges. Parameters: Name Type Description Default root str , Path , optional path to the folder containing the raw downloaded archives. If not provided, the cache is assumed to be already populated. required version str , optional the data version. Only has effect if the library was installed from a cloned git repository. required","title":"VerSe"},{"location":"datasets/","text":"Datasets Name Entries Body region License Link Modality Raw data size Task CC359 359 Head CC BY-ND Source MRI T1 4,1G Segmentation CT_ICH 75 Head PhysioNet Restricted Health Data License 1.5.0 Source CT 2,8G Intracranial hemorrhage segmentation CrossMoDA 484 Head CC BY-NC-SA 4.0 Source ('MRI T1c', 'MRI T2hr') 17G ('Segmentation', 'Classification', 'Domain Adaptation') EGD 774 Head EGD data license Source ('FLAIR', 'MRI T1', 'MRI T1GD', 'MRI T2') 40G Segmentation FLARE2022 2100 Abdomen nan Source CT 247G Semi-supervised abdominal organ segmentation LIDC 1018 Chest CC BY 3.0 Source CT 126G Lung nodules segmentation LiTS 201 Abdominal CC BY-NC-ND 4.0 Source CT 35G Segmentation LiverMedseg 50 ('Chest', 'Abdomen') CC-BY-SA 4.0 Source CT 616M Segmentation MIDRC 155 Thorax CC BY-NC 4.0 Source CT 12G COVID-19 Segmentation MOOD 1358 ('Head', 'Abdominal') nan Source ('MRI', 'CT') 120G Out-of-distribution detection Medseg9 9 Chest CC0 Source CT 310M COVID-19 segmentation MoscowCancer500 979 Thorax nan Source CT 187G Lung Cancer Detection MoscowCovid1110 1110 Thorax nan Source CT 21G COVID-19 Segmentation NSCLC 422 Thorax CC BY 3.0 Source CT 34G Tumor Segmentation VSSEG 242 Head CC BY 4.0 Source ('MRI T1c', 'MRI T2') 27G Segmentation VerSe 374 Thorax, Abdomen nan Source CT 97G Vertebrae Segmentation","title":"Datasets"},{"location":"datasets/#datasets","text":"Name Entries Body region License Link Modality Raw data size Task CC359 359 Head CC BY-ND Source MRI T1 4,1G Segmentation CT_ICH 75 Head PhysioNet Restricted Health Data License 1.5.0 Source CT 2,8G Intracranial hemorrhage segmentation CrossMoDA 484 Head CC BY-NC-SA 4.0 Source ('MRI T1c', 'MRI T2hr') 17G ('Segmentation', 'Classification', 'Domain Adaptation') EGD 774 Head EGD data license Source ('FLAIR', 'MRI T1', 'MRI T1GD', 'MRI T2') 40G Segmentation FLARE2022 2100 Abdomen nan Source CT 247G Semi-supervised abdominal organ segmentation LIDC 1018 Chest CC BY 3.0 Source CT 126G Lung nodules segmentation LiTS 201 Abdominal CC BY-NC-ND 4.0 Source CT 35G Segmentation LiverMedseg 50 ('Chest', 'Abdomen') CC-BY-SA 4.0 Source CT 616M Segmentation MIDRC 155 Thorax CC BY-NC 4.0 Source CT 12G COVID-19 Segmentation MOOD 1358 ('Head', 'Abdominal') nan Source ('MRI', 'CT') 120G Out-of-distribution detection Medseg9 9 Chest CC0 Source CT 310M COVID-19 segmentation MoscowCancer500 979 Thorax nan Source CT 187G Lung Cancer Detection MoscowCovid1110 1110 Thorax nan Source CT 21G COVID-19 Segmentation NSCLC 422 Thorax CC BY 3.0 Source CT 34G Tumor Segmentation VSSEG 242 Head CC BY 4.0 Source ('MRI T1c', 'MRI T2') 27G Segmentation VerSe 374 Thorax, Abdomen nan Source CT 97G Vertebrae Segmentation","title":"Datasets"}]}